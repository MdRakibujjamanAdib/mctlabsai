rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions for enhanced security
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             request.auth.token.email == 'admin@mctlabs.tech' &&
             request.auth.token.email_verified == true &&
             exists(/databases/$(database)/documents/profiles/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.isAdmin == true;
    }
    
    function isValidDIUEmail() {
      return isAuthenticated() && 
             request.auth.token.email_verified == true &&
             (request.auth.token.email.matches('.*-40-[0-9]{3}@diu\\.edu\\.bd') ||
              request.auth.token.email == 'admin@mctlabs.tech');
    }
    
    function isValidDataSize(data) {
      return data.size() <= 1000000; // 1MB limit for document size
    }
    
    function hasValidTimestamp(data) {
      return data.keys().hasAll(['created_at', 'updated_at']);
    }

    function isRecentRequest() {
      return request.time > timestamp.date(2025, 1, 1); // Only allow requests after 2025
    }

    // Security logs - Admin only, critical for audit trail
    match /security_logs/{logId} {
      allow read: if isAdmin();
      allow create: if isAuthenticated() && isValidDataSize(request.resource.data);
      allow update, delete: if false; // Security logs are immutable
    }

    // Profiles - Enhanced security with email validation
    match /profiles/{userId} {
      allow read: if isAuthenticated() && isValidDIUEmail() && (
        isOwner(userId) || isAdmin()
      );
      
      allow create: if isAuthenticated() && 
                       isOwner(userId) && 
                       isValidDIUEmail() &&
                       isValidDataSize(request.resource.data) &&
                       isRecentRequest();
      
      allow update: if isAuthenticated() && 
                      isValidDIUEmail() &&
                      isValidDataSize(request.resource.data) && (
        (isOwner(userId) && !('isAdmin' in request.resource.data.diff(resource.data).affectedKeys())) ||
        isAdmin()
      );
      
      allow delete: if isAdmin();
    }

    // Chat messages - Strict user isolation with email verification
    match /chat_messages/{messageId} {
      allow read, write: if isAuthenticated() && 
                           isValidDIUEmail() &&
                           isOwner(resource.data.user_id) &&
                           isValidDataSize(request.resource.data);
      
      allow create: if isAuthenticated() && 
                      isValidDIUEmail() &&
                      isOwner(request.resource.data.user_id) &&
                      isValidDataSize(request.resource.data) &&
                      isRecentRequest();
    }

    // Chat conversations - User isolation with verification
    match /chat_conversations/{conversationId} {
      allow read, write: if isAuthenticated() && 
                           isValidDIUEmail() &&
                           isOwner(resource.data.user_id) &&
                           isValidDataSize(request.resource.data);
      
      allow create: if isAuthenticated() && 
                      isValidDIUEmail() &&
                      isOwner(request.resource.data.user_id) &&
                      isValidDataSize(request.resource.data) &&
                      isRecentRequest();
    }

    // History items - User isolation with verification
    match /history_items/{historyId} {
      allow read, write: if isAuthenticated() && 
                           isValidDIUEmail() &&
                           isOwner(resource.data.user_id) &&
                           isValidDataSize(request.resource.data);
      
      allow create: if isAuthenticated() && 
                      isValidDIUEmail() &&
                      isOwner(request.resource.data.user_id) &&
                      isValidDataSize(request.resource.data) &&
                      isRecentRequest();
    }

    // Echo personas - User isolation
    match /echo_personas/{personaId} {
      allow read, write: if isAuthenticated() && 
                           isValidDIUEmail() &&
                           isOwner(resource.data.user_id) &&
                           isValidDataSize(request.resource.data);
      
      allow create: if isAuthenticated() && 
                      isValidDIUEmail() &&
                      isOwner(request.resource.data.user_id) &&
                      isValidDataSize(request.resource.data) &&
                      isRecentRequest();
    }

    // Tuner history - User isolation
    match /tuner_history/{historyId} {
      allow read, write: if isAuthenticated() && 
                           isValidDIUEmail() &&
                           isOwner(resource.data.user_id) &&
                           isValidDataSize(request.resource.data);
      
      allow create: if isAuthenticated() && 
                      isValidDIUEmail() &&
                      isOwner(request.resource.data.user_id) &&
                      isValidDataSize(request.resource.data) &&
                      isRecentRequest();
    }

    // API Keys - Admin only with strict validation
    match /api_keys/{keyId} {
      allow read: if isAuthenticated() && isValidDIUEmail();
      allow write: if isAdmin() && 
                     isValidDataSize(request.resource.data) &&
                     isRecentRequest();
    }

    // AI Agents - Admin only
    match /ai_agents/{agentId} {
      allow read: if isAuthenticated() && isValidDIUEmail();
      allow write: if isAdmin() && 
                     isValidDataSize(request.resource.data) &&
                     isRecentRequest();
    }

    // AI Context Entries - Admin only
    match /ai_context_entries/{entryId} {
      allow read: if isAuthenticated() && isValidDIUEmail();
      allow write: if isAdmin() && 
                     isValidDataSize(request.resource.data) &&
                     isRecentRequest();
    }

    // Published apps - Public read, verified users create
    match /published_apps/{appId} {
      allow read: if true; // Public read access for game center
      allow create: if isAuthenticated() && 
                      isValidDIUEmail() &&
                      isValidDataSize(request.resource.data) &&
                      isRecentRequest();
      allow update, delete: if false; // Prevent modifications after publishing
    }

    // User subscriptions - User and admin access
    match /userSubscriptions/{userId} {
      allow read: if isAuthenticated() && isValidDIUEmail() && (isOwner(userId) || isAdmin());
      allow write: if isAdmin() && 
                     isValidDataSize(request.resource.data) &&
                     isRecentRequest();
    }

    // Plans - Authenticated read, admin write
    match /plans/{planId} {
      allow read: if isAuthenticated() && isValidDIUEmail();
      allow write: if isAdmin() && 
                     isValidDataSize(request.resource.data) &&
                     isRecentRequest();
    }

    // User management logs - Admin only
    match /user_management_logs/{logId} {
      allow read, write: if isAdmin() && 
                           isValidDataSize(request.resource.data) &&
                           isRecentRequest();
    }

    // Admin users collection - Admin only
    match /admin_users/{adminId} {
      allow read: if isAdmin();
      allow create, update: if isAdmin() && 
                              isValidDataSize(request.resource.data) &&
                              isRecentRequest();
      allow delete: if false; // Prevent admin user deletion
    }

    // Default deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}